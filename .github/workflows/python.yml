name: Python

on:
  push:
    branches: [main, master]
    tags: ['*']
  pull_request:
  workflow_dispatch:

jobs:
  build-unix:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist python
        env:
          # ------------------ LINUX: Install dependencies ------------------
          CIBW_BEFORE_ALL: >-
            ${{ matrix.os == 'ubuntu-latest' &&
            'yum install -y openssl-devel pkgconfig perl perl-IPC-Cmd chromium &&
            curl -sSLo /tmp/chromedriver.zip https://storage.googleapis.com/chrome-for-testing-public/124.0.6367.207/linux64/chromedriver-linux64.zip &&
            unzip /tmp/chromedriver.zip -d /usr/bin &&
            mv /usr/bin/chromedriver-linux64/chromedriver /usr/bin/chromedriver &&
            chmod +x /usr/bin/chromedriver'
            || '' }}
          WEBDRIVER_PATH: ${{ matrix.os == 'ubuntu-latest' && '/usr/bin/chromedriver' || '' }}

          # ------------------ MACOS: Fix missing target error ------------------
          CIBW_BEFORE_BUILD_MACOS: "rustup target add x86_64-apple-darwin"
          CIBW_ENVIRONMENT_MACOS: 'MACOSX_DEPLOYMENT_TARGET=10.13 RUSTUP_TOOLCHAIN=stable'

          # ------------------ cibuildwheel config ------------------
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          CIBW_SKIP: "*-musllinux*"
          CIBW_ARCHS_LINUX: auto
          CIBW_ARCHS_MACOS: universal2
          CIBW_BUILD_VERBOSITY: 1

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [ x64, x86 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.target }}
      - name: Build wheels on windows
        uses: PyO3/maturin-action@v1
        env:
          PYO3_PYTHON: C:\hostedtoolcache\windows\Python\3.10.15\${{ matrix.target }}\python.exe
          PYO3_USE_ABI3_FORWARD_COMPATIBILITY: 1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --find-interpreter
          working-directory: python
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          path: python/dist
          name: windows-wheels-${{ matrix.target }}
          overwrite: false

  sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install maturin
        run: pip install maturin

      - name: Build sdist
        run: maturin sdist -o dist
        working-directory: python

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: python/dist/*.tar.gz

  release:
    name: Publish to PyPI
    # if: startsWith(github.ref, 'refs/tags/') #nb: comment this line to release to pypi
    needs: [build-unix, build-windows, sdist]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Gather into dist/
        run: |
          mkdir -p dist
          find artifacts -type f \( -name "*.whl" -o -name "*.tar.gz" \) -exec cp {} dist/ \;

      - name: Publish to PyPI with maturin
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*
