---
title: Ticker Module Documentation
format:
  html:
    page-layout: full
---

### Ticker

A class representing a Ticker object.

<details>
<summary>`__new__`</summary>

Create a new Ticker object.

**Parameters:**

- `symbol` (str): The ticker symbol of the asset.
- `start_date` (Optional[str]): Optional start date for historical data, defaults to None.
- `end_date` (Optional[str]): Optional end date for historical data, defaults to None.
- `interval` (Optional[str]): Optional data interval (2m, 5m, 15m, 30m, 1h, 1d, 1wk, 1mo, 3mo), defaults to None.
- `benchmark_symbol` (Optional[str]): Optional benchmark symbol, defaults to None.
- `confidence_level` (Optional[float]): Optional confidence level for statistics, defaults to None.
- `risk_free_rate` (Optional[float]): Optional risk-free rate for calculations, defaults to None.

**Returns:**

- `Ticker`: A Ticker object.

**Example:**

```{python}
from finalytics import Ticker

ticker = Ticker(symbol="AAPL", 
                start_date="2023-01-01", 
                end_date="2024-01-01", 
                interval="1d",
                benchmark_symbol="^GSPC",
                confidence_level=0.95,
                risk_free_rate=0.02)
```
</details>

<details>
<summary>`get_quote`</summary>

Get the current ticker quote stats.

**Returns:**

- `dict`: Dictionary containing current ticker quote stats.

**Example:**

```{python}
quote = ticker.get_quote()
print(quote)
```
</details>

<details>
<summary>`get_summary_stats`</summary>

Get summary technical and fundamental statistics for the ticker.

**Returns:**

- `dict`: Dictionary containing summary statistics.

**Example:**

```{python}
summary_stats = ticker.get_summary_stats()
print(summary_stats)
```
</details>

<details>
<summary>`get_price_history`</summary>

Get the OHLCV data for the ticker for a given time period.

**Returns:**

- `DataFrame`: Polars DataFrame containing OHLCV data.

**Example:**

```{python}
price_history = ticker.get_price_history()
print(price_history)
```
</details>

<details>
<summary>`get_options_chain`</summary>

Get the options chain for the ticker.

**Returns:**

- `DataFrame`: Polars DataFrame containing the options chain.

**Example:**

```{python}
options_chain = ticker.get_options_chain()
print(options_chain)
```
</details>

<details>
<summary>`get_news`</summary>

Get the historical news headlines for the given ticker.

**Returns:**

- `DataFrame`: Polars DataFrame containing news headlines.

**Example:**

```{python}
news = ticker.get_news()
print(news)
```
</details>

<details>
<summary>`get_income_statement`</summary>

Get the Income Statement for the ticker.

**Returns:**

- `DataFrame`: Polars DataFrame containing the Income Statement.

**Example:**

```{python}
income_statement = ticker.get_income_statement()
print(income_statement)
```
</details>

<details>
<summary>`get_balance_sheet`</summary>

Get the Balance Sheet for the ticker.

**Returns:**

- `DataFrame`: Polars DataFrame containing the Balance Sheet.

**Example:**

```{python}
balance_sheet = ticker.get_balance_sheet()
print(balance_sheet)
```
</details>

<details>
<summary>`get_cashflow_statement`</summary>

Get the Cashflow Statement for the ticker.

**Returns:**

- `DataFrame`: Polars DataFrame containing the Cashflow Statement.

**Example:**

```{python}
cashflow_statement = ticker.get_cashflow_statement()
print(cashflow_statement)
```
</details>

<details>
<summary>`get_financial_ratios`</summary>

Get the Financial Ratios for the ticker.

**Returns:**

- `DataFrame`: Polars DataFrame containing the Financial Ratios.

**Example:**

```{python}
financial_ratios = ticker.get_financial_ratios()
print(financial_ratios)
```
</details>

<details>
<summary>`volatility_surface`</summary>

Computes the implied volatility surface for the ticker options chain.

**Returns:**

- `DataFrame`: Polars DataFrame containing the implied volatility surface.

**Example:**

```{python}
volatility_surface = ticker.volatility_surface()
print(volatility_surface)
```
</details>

<details>
<summary>`performance_stats`</summary>

Compute the performance statistics for the ticker.

**Returns:**

- `dict`: Dictionary containing performance statistics.

**Example:**

```{python}
performance_stats = ticker.performance_stats()
print(performance_stats)
```
</details>

<details>
<summary>`performance_chart`</summary>

Display the performance chart for the ticker.

**Parameters:**

- `height` (Optional[int]): Optional height of the plot in pixels, defaults to None.
- `width` (Optional[int]): Optional width of the plot in pixels, defaults to None.

**Returns:**

- `Plot`: Plot object containing the performance chart.

**Example:**

```{python}
performance_chart = ticker.performance_chart()
performance_chart.show()
```
</details>

<details>
<summary>`candlestick_chart`</summary>

Display the candlestick chart for the ticker.

**Parameters:**

- `height` (Optional[int]): Optional height of the plot in pixels, defaults to None.
- `width` (Optional[int]): Optional width of the plot in pixels, defaults to None.

**Returns:**

- `Plot`: Plot object containing the candlestick chart.

**Example:**

```{python}
candlestick_chart = ticker.candlestick_chart()
candlestick_chart.show()
```
</details>

<details>
<summary>`news_sentiment_chart`</summary>

Display the News Sentiment chart for the ticker.

**Parameters:**

- `height` (Optional[int]): Optional height of the plot in pixels, defaults to None.
- `width` (Optional[int]): Optional width of the plot in pixels, defaults to None.

**Returns:**

- `Plot`: Plot object containing the news sentiment chart.

**Example:**

```{python}
news_sentiment_chart = ticker.news_sentiment_chart()
news_sentiment_chart.show()
```
</details>

<details>
<summary>`options_chart`</summary>

Display the options volatility surface, smile and term structure charts for the ticker.

**Parameters:**

- `chart_type` (str): Type of options chart (surface, smile, term_structure).
- `height` (Optional[int]): Optional height of the plot in pixels, defaults to None.
- `width` (Optional[int]): Optional width of the plot in pixels, defaults to None.

**Returns:**

- `Plot`: Plot object containing the options chart.

**Example:**

```{python}
options_chart = ticker.options_chart(chart_type="surface", )
options_chart.show()
```
</details>
