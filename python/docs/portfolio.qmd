---
title: Portfolio Module Documentation
format:
  html:
    page-layout: full
---

### Portfolio

A class representing a Portfolio object.


<details>
<summary>`__new__`</summary>

Create a new Portfolio object.

**Parameters:**

- `ticker_symbols` (List[str]): List of ticker symbols in the portfolio.
- `benchmark_symbol` (str): The ticker symbol of the benchmark.
- `start_date` (str): The start date for historical data.
- `end_date` (str): The end date for historical data.
- `interval` (str): The interval for historical data.
- `confidence_level` (float): The confidence level for risk calculations.
- `risk_free_rate` (float): The risk-free rate for calculations.
- `objective_function` (Optional[str]): The objective function for optimization:
  - `max_sharpe`: Maximize return per unit of risk.
  - `min_vol`: Minimize overall volatility.
  - `max_return`: Maximize expected return.
  - `min_var`: Minimize Value-at-Risk (VaR).
  - `min_cvar`: Minimize Conditional Value-at-Risk (CVaR).
  - `min_drawdown`: Minimize maximum portfolio drawdown.
- `asset_constraints` (Optional[List[Tuple[float, float]]]): List of tuples with the lower and upper bounds for the ticker weights.
- `categorical_constraints` (Optional[List[Tuple[str, List[str], List[Tuple[str, float, float]]]]]): Category-based constraints.
  Each tuple has the form:
  - `category_name` (str): Name of the constraint group (e.g., `"AssetClass"`).
  - `category_per_symbol` (List[str]): Assigns each ticker to a category, in the same order as `ticker_symbols`.
  - `weight_per_category` (List[Tuple[str, float, float]]): Tuples of `(category_label, min_weight, max_weight)` specifying bounds for each category.
- `weights` (Optional[List[float]]): Weights for the assets in the portfolio. If provided, it will override the optimization process.

**Returns:**

- `Portfolio`: A Portfolio object.

**Example:**

```{python}
from finalytics import Portfolio

portfolio = Portfolio(
    ticker_symbols=["AAPL", "GOOG", "MSFT", "NVDA", "BTC-USD"],
    benchmark_symbol="^GSPC",
    start_date="2020-01-01",
    end_date="2024-01-01",
    interval="1d",
    confidence_level=0.95,
    risk_free_rate=0.02,
    objective_function="max_sharpe",
    asset_constraints=[(0, 1), (0, 1), (0, 1), (0, 1), (0, 1)],
    categorical_constraints=[
        (
            "AssetClass",
            ["EQUITY", "EQUITY", "EQUITY", "EQUITY", "CRYPTO"],
            [("EQUITY", 0.0, 0.8), ("CRYPTO", 0.0, 0.2)]
        )
    ]
)
```
</details>


<details>
<summary>`optimization_results`</summary>

Get the optimization results for the portfolio.

**Returns:**

- `dict`: Dictionary containing the portfolio optimization results.

**Example:**

```{python}
optimization_results = portfolio.optimization_results()
print(optimization_results)
```
</details>


<details>
<summary>`optimization_chart`</summary>

Display the efficient frontier and allocation chart for the portfolio.

**Parameters:**

- `height` (Optional[int]): Optional height of the plot in pixels, defaults to None.
- `width` (Optional[int]): Optional width of the plot in pixels, defaults to None.

**Returns:**

- `Plot`: Plot object containing the portfolio optimization chart.

**Example:**

```{python}
optimization_chart = portfolio.optimization_chart()
optimization_chart.show()
```
</details>


<details>
<summary>`performance_chart`</summary>

Display the performance chart for the portfolio.

**Parameters:**

- `height` (Optional[int]): Optional height of the plot in pixels, defaults to None.
- `width` (Optional[int]): Optional width of the plot in pixels, defaults to None.

**Returns:**

- `Plot`: Plot object containing the performance chart.

**Example:**

```{python}
performance_chart = portfolio.performance_chart()
performance_chart.show()
```
</details>


<details>
<summary>`asset_returns_chart`</summary>

Display the individual asset returns chart for the portfolio.

**Parameters:**

- `height` (Optional[int]): Optional height of the plot in pixels, defaults to None.
- `width` (Optional[int]): Optional width of the plot in pixels, defaults to None.

**Returns:**

- `Plot`: Plot object containing the asset returns chart.

**Example:**

```{python}
asset_returns_chart = portfolio.asset_returns_chart()
asset_returns_chart.show()
```
</details>


<details>
<summary>`returns_matrix`</summary>

Display the returns correlation matrix for the portfolio.

**Parameters:**

- `height` (Optional[int]): Optional height of the plot in pixels, defaults to None.
- `width` (Optional[int]): Optional width of the plot in pixels, defaults to None.

**Returns:**

- `Plot`: Plot object containing the returns correlation matrix.

**Example:**

```{python}
returns_matrix = portfolio.returns_matrix()
returns_matrix.show()
```
</details>


<details>
<summary>`report`</summary>

Generate a report for the portfolio.

**Parameters:**

- `report_type` (Optional[str]): The type of report to generate. Options are "performance".
- display (Optional[str]): The display mode for the report. set to "notebook" for Jupyter Notebook display, defaults to "browser".

**Example:**

```python
portfolio.report("performance")
```
</details>
